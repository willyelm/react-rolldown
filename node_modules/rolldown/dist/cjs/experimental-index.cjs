"use strict";
const require_chunk = require('../shared/chunk-qZFfknuJ.cjs');
const require_src = require('../shared/src-AhtJ8ilG.cjs');
const require_binding = require('../shared/binding-orkvONpS.cjs');
const node_url = require_chunk.__toESM(require("node:url"));

//#region src/plugin/parallel-plugin.ts
function defineParallelPlugin(pluginPath) {
	return (options) => {
		return { _parallel: {
			fileUrl: (0, node_url.pathToFileURL)(pluginPath).href,
			options
		} };
	};
}

//#endregion
//#region src/api/experimental.ts
const experimental_scan = async (input) => {
	const { bundler, stopWorkers } = await require_src.createBundler(input, {});
	const output = await bundler.scan();
	require_src.handleOutputErrors(output);
	await stopWorkers?.();
};

//#endregion
//#region src/builtin-plugin/transform-plugin.ts
function normalizeEcmaTransformPluginConfig(config) {
	if (!config) return undefined;
	let normalizedConfig = {
		...config,
		exclude: require_src.normalizedStringOrRegex(config.exclude),
		include: require_src.normalizedStringOrRegex(config.include)
	};
	return normalizedConfig;
}
function transformPlugin(config) {
	return new require_src.BuiltinPlugin("builtin:transform", normalizeEcmaTransformPluginConfig(config));
}

//#endregion
//#region src/builtin-plugin/replace-plugin.ts
function replacePlugin(values = {}, options = {}) {
	return new require_src.BuiltinPlugin("builtin:replace", {
		...options,
		values
	});
}

//#endregion
//#region src/builtin-plugin/alias-plugin.ts
function aliasPlugin(config) {
	return new require_src.BuiltinPlugin("builtin:alias", config);
}

//#endregion
exports.aliasPlugin = aliasPlugin
exports.buildImportAnalysisPlugin = require_src.buildImportAnalysisPlugin
exports.composePlugins = require_src.composeJsPlugins
exports.defineParallelPlugin = defineParallelPlugin
exports.dynamicImportVarsPlugin = require_src.dynamicImportVarsPlugin
exports.importGlobPlugin = require_src.importGlobPlugin
exports.jsonPlugin = require_src.jsonPlugin
exports.loadFallbackPlugin = require_src.loadFallbackPlugin
exports.manifestPlugin = require_src.manifestPlugin
exports.moduleFederationPlugin = require_src.moduleFederationPlugin
exports.modulePreloadPolyfillPlugin = require_src.modulePreloadPolyfillPlugin
exports.replacePlugin = replacePlugin
exports.scan = experimental_scan
Object.defineProperty(exports, 'transform', {
  enumerable: true,
  get: function () {
    return import_binding.transform;
  }
});
exports.transformPlugin = transformPlugin
exports.viteResolvePlugin = require_src.viteResolvePlugin
exports.wasmFallbackPlugin = require_src.wasmFallbackPlugin
exports.wasmHelperPlugin = require_src.wasmHelperPlugin