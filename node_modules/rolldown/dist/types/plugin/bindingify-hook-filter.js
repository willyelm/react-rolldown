import { arraify } from '../utils/misc';
export function bindingifyStringFilter(matcher) {
    if (typeof matcher === 'string' || matcher instanceof RegExp) {
        return { include: [matcher] };
    }
    if (Array.isArray(matcher)) {
        return { include: matcher };
    }
    return {
        include: matcher.include ? arraify(matcher.include) : undefined,
        exclude: matcher.exclude ? arraify(matcher.exclude) : undefined,
    };
}
export function bindingifyResolveIdFilter(filterOption) {
    return filterOption?.id ? bindingifyStringFilter(filterOption.id) : undefined;
}
export function bindingifyLoadFilter(filterOption) {
    return filterOption?.id ? bindingifyStringFilter(filterOption.id) : undefined;
}
export function bindingifyTransformFilter(filterOption) {
    if (!filterOption) {
        return undefined;
    }
    const { id, code, moduleType } = filterOption;
    let moduleTypeRet;
    if (moduleType) {
        if (Array.isArray(moduleType)) {
            moduleTypeRet = moduleType;
        }
        else {
            moduleTypeRet = moduleType.include;
        }
    }
    return {
        id: id ? bindingifyStringFilter(id) : undefined,
        code: code ? bindingifyStringFilter(code) : undefined,
        moduleType: moduleTypeRet,
    };
}
