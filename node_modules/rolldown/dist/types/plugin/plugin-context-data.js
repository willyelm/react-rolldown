import { transformModuleInfo } from '../utils/transform-module-info';
export class PluginContextData {
    moduleOptionMap = new Map();
    resolveOptionsMap = new Map();
    loadModulePromiseMap = new Map();
    updateModuleOption(id, option) {
        const existing = this.moduleOptionMap.get(id);
        if (existing) {
            if (option.moduleSideEffects != null) {
                existing.moduleSideEffects = option.moduleSideEffects;
            }
            if (option.meta != null) {
                Object.assign(existing.meta, option.meta);
            }
        }
        else {
            this.moduleOptionMap.set(id, option);
        }
    }
    getModuleOption(id) {
        const option = this.moduleOptionMap.get(id);
        if (!option) {
            const raw = {
                moduleSideEffects: null,
                meta: {},
            };
            this.moduleOptionMap.set(id, raw);
            return raw;
        }
        return option;
    }
    getModuleInfo(id, context) {
        const bindingInfo = context.getModuleInfo(id);
        if (bindingInfo) {
            const info = transformModuleInfo(bindingInfo, this.getModuleOption(id));
            return info;
        }
        return null;
    }
    getModuleIds(context) {
        const moduleIds = context.getModuleIds();
        return moduleIds.values();
    }
    saveResolveOptions(options) {
        const index = this.resolveOptionsMap.size;
        this.resolveOptionsMap.set(index, options);
        return index;
    }
    getSavedResolveOptions(receipt) {
        return this.resolveOptionsMap.get(receipt);
    }
    removeSavedResolveOptions(receipt) {
        this.resolveOptionsMap.delete(receipt);
    }
}
