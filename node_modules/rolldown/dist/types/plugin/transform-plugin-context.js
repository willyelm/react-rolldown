import { normalizeLog } from '../log/logHandler';
import { PluginContext } from './plugin-context';
import { augmentCodeLocation, error, logPluginError } from '../log/logs';
export class TransformPluginContext extends PluginContext {
    inner;
    moduleId;
    moduleSource;
    constructor(outputOptions, context, plugin, data, inner, moduleId, moduleSource, onLog, LogLevelOption) {
        super(outputOptions, context, plugin, data, onLog, LogLevelOption, moduleId);
        this.inner = inner;
        this.moduleId = moduleId;
        this.moduleSource = moduleSource;
        const getLogHandler = (handler) => (log, pos) => {
            log = normalizeLog(log);
            if (pos)
                augmentCodeLocation(log, pos, moduleSource, moduleId);
            log.id = moduleId;
            log.hook = 'transform';
            handler(log);
        };
        this.debug = getLogHandler(this.debug);
        this.warn = getLogHandler(this.warn);
        this.info = getLogHandler(this.info);
    }
    error(e, pos) {
        if (typeof e === 'string')
            e = { message: e };
        if (pos)
            augmentCodeLocation(e, pos, this.moduleSource, this.moduleId);
        e.id = this.moduleId;
        e.hook = 'transform';
        return error(logPluginError(normalizeLog(e), this.pluginName));
    }
    getCombinedSourcemap() {
        return JSON.parse(this.inner.getCombinedSourcemap());
    }
}
