import { normalizeHook } from '../utils/normalize-hook';
import { PluginContext } from './plugin-context';
import { bindingifyPluginHookMeta, } from './bindingify-plugin-hook-meta';
export function bindingifyWatchChange(args) {
    const hook = args.plugin.watchChange;
    if (!hook) {
        return {};
    }
    const { handler, meta } = normalizeHook(hook);
    return {
        plugin: async (ctx, id, event) => {
            await handler.call(new PluginContext(args.outputOptions, ctx, args.plugin, args.pluginContextData, args.onLog, args.logLevel), id, { event: event });
        },
        meta: bindingifyPluginHookMeta(meta),
    };
}
export function bindingifyCloseWatcher(args) {
    const hook = args.plugin.closeWatcher;
    if (!hook) {
        return {};
    }
    const { handler, meta } = normalizeHook(hook);
    return {
        plugin: async (ctx) => {
            await handler.call(new PluginContext(args.outputOptions, ctx, args.plugin, args.pluginContextData, args.onLog, args.logLevel));
        },
        meta: bindingifyPluginHookMeta(meta),
    };
}
