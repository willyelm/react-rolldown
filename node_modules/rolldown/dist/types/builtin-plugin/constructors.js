import { makeBuiltinPluginCallable } from './utils';
export class BuiltinPlugin {
    name;
    _options;
    constructor(name, 
    // NOTE: has `_` to avoid conflict with `options` hook
    _options) {
        this.name = name;
        this._options = _options;
        this.name = name;
        this._options = _options;
    }
}
export function modulePreloadPolyfillPlugin(config) {
    return new BuiltinPlugin('builtin:module-preload-polyfill', config);
}
export function dynamicImportVarsPlugin() {
    return new BuiltinPlugin('builtin:dynamic-import-vars');
}
export function importGlobPlugin(config) {
    return new BuiltinPlugin('builtin:import-glob', config);
}
export function manifestPlugin(config) {
    return new BuiltinPlugin('builtin:manifest', config);
}
export function wasmHelperPlugin() {
    return new BuiltinPlugin('builtin:wasm-helper');
}
export function wasmFallbackPlugin() {
    return new BuiltinPlugin('builtin:wasm-fallback');
}
export function loadFallbackPlugin() {
    return new BuiltinPlugin('builtin:load-fallback');
}
export function jsonPlugin(config) {
    return new BuiltinPlugin('builtin:json', config);
}
export function buildImportAnalysisPlugin(config) {
    return new BuiltinPlugin('builtin:build-import-analysis', config);
}
export function viteResolvePlugin(config) {
    const builtinPlugin = new BuiltinPlugin('builtin:vite-resolve', {
        ...config,
        runtime: process.versions.deno
            ? 'deno'
            : process.versions.bun
                ? 'bun'
                : 'node',
    });
    return makeBuiltinPluginCallable(builtinPlugin);
}
export function moduleFederationPlugin(config) {
    return new BuiltinPlugin('builtin:module-federation', {
        ...config,
        remotes: config.remotes &&
            Object.entries(config.remotes).map(([name, remote]) => {
                if (typeof remote === 'string') {
                    const [entryGlobalName] = remote.split('@');
                    const entry = remote.replace(entryGlobalName + '@', '');
                    return { entry, name };
                }
                return {
                    ...remote,
                    name: remote.name ?? name,
                };
            }),
    });
}
