import { parentPort, workerData } from 'node:worker_threads';
import { registerPlugins } from './binding';
import { bindingifyPlugin } from './plugin/bindingify-plugin';
import { PluginContextData } from './plugin/plugin-context-data';
const { registryId, pluginInfos, threadNumber } = workerData;
(async () => {
    try {
        const plugins = await Promise.all(pluginInfos.map(async (pluginInfo) => {
            const pluginModule = await import(pluginInfo.fileUrl);
            const definePluginImpl = pluginModule.default;
            const plugin = await definePluginImpl(pluginInfo.options, {
                threadNumber,
            });
            return {
                index: pluginInfo.index,
                // TODO(sapphi-red): support inputOptions and outputOptions
                plugin: bindingifyPlugin(plugin, {}, {}, 
                // TODO need to find a way to share pluginContextData
                new PluginContextData(), () => { }, 'info'),
            };
        }));
        registerPlugins(registryId, plugins);
        parentPort.postMessage({ type: 'success' });
    }
    catch (error) {
        parentPort.postMessage({ type: 'error', error });
    }
    finally {
        parentPort.unref();
    }
})();
